#!/usr/bin/env python
"""
%prog [OPTIONS] MODE ARGUMENTS...

Update remote Git-SVN mirrors that can require SSH keys to push.

Rationale:

  You want to keep a git-svn mirror up-to-date, using a post-commit hook
  in SVN. But maybe you want to host your mirrors elsewhere, or do post-commit
  processing on a different machine.

Modes:

  cgi CONFFILE
      Function as a CGI script. URL '%prog/REPO/SECRETKEY'
      triggers a background upgrade of a given repository, provided
      the secret key matches that given in the config file.

      Consider also limiting access to the URL, to prevent denial of service
      attacks.

  daemon CONFFILE
      Function as a daemon that listens on a TCP port.
      Writing 'REPO SECRETKEY' (eg. with the 'telnet' command)
      to the port causes it to trigger an update.

  fifo CONFFILE PIPE
      Function as a daemon that reads from a fifo (see 'man mkfifo').
      Writing 'REPO SECRETKEY' to the fifo triggers an update.

  update CONFFILE REPO
      Update the given repository (without forking to background).

      NOTE: you may need to run this with ssh-agent

  update-bg CONFFILE REPO
      Update the given repository (forking to background).

Configuration file:

  [global]
  secret_key = A secret key for the CGI/daemon modes.
  log_file = Path to the log file (used for CGI/daemon/bg mode). Optional.
  pid_file = Path to the pid file (user for daemon mode). Optional.
  port = TCP port to listen on (used for daemon mode). Default: 3898
  allow_ip = IPs allowed, whitespace-separated (daemon/CGI). Default: 0.0.0.0/0

  [REPO1]
  vcs = git
  local = Local path.
  remote = Remote URL where to upload.
  git_svn_init = Arguments to 'git-svn init' for initial clone.
  git_svn_fetch = Arguments to 'git-svn fetch' for initial clone.
  ssh_key = The SSH private key needed for uploading. Optional.

  [REPO2]
  ...

"""
#------------------------------------------------------------------------------
#
# Author: Pauli Virtanen <pav@iki.fi>
#
# This script is in the Public Domain. No guarantees.
#

import cgi
import os
import re
import sys
import struct
import shutil
import time
import socket
import logging
import signal
from optparse import OptionParser
from subprocess import Popen, PIPE


#------------------------------------------------------------------------------
# Entry point
#------------------------------------------------------------------------------

def main():
    p = OptionParser(__doc__.strip())
    p.add_option("-l", "--log-level", action="store", default="info",
                help="Log level to use (debug, info, warning, error, critical)")
    options, args = p.parse_args()

    if len(args) < 2:
        p.error("mode and configuration file not given")

    mode = args.pop(0)
    config_file = args.pop(0)

    try:
        log_level = dict(debug=logging.DEBUG,
                         info=logging.INFO,
                         warning=logging.WARNING,
                         error=logging.ERROR,
                         critical=logging.CRITICAL)[options.log_level.lower()]
    except KeyError:
        p.error("invalid log level '%s'" % options.log_level)

    init_logging(mode, level=log_level)

    if mode == 'cgi':
        if args:
            p.error("extraneous arguments given")
        run_cgi(validate_config(Config.load(config_file)))
    elif mode == 'daemon':
        if args:
            p.error("extraneous arguments given")
        run_daemon(validate_config(Config.load(config_file)))
    elif mode == 'fifo':
        if len(args) != 1:
            p.error("fifo name not given")
        run_fifo(args[0], validate_config(Config.load(config_file)))
    elif mode == 'update' or mode == 'update-bg':
        if not args:
            p.error("no repository to update given")
        config = validate_config(Config.load(config_file))
        for name in args:
            if not config.is_repo(name):
                p.error("unknown repository '%s'" % name)
        if mode == 'update':
            run_update(args, config)
        else:
            logging.debug("Updating in the background")
            spawn_repo_update(config, args)
    else:
        p.error("unknown mode '%s'" % mode)

def init_logging(tag="", level=logging.DEBUG):
    logging.basicConfig(level=level)

    logger = logging.getLogger()
    fmt = logging.Formatter('%(asctime)s '+tag+'(%(process)d) %(levelname)s %(message)s')
    logger.handlers[0].setFormatter(fmt)

def init_sigchld(catch=False):
    """Install a proper SIGCHLD handler to avoid zombies"""
    if catch:
        signal.signal(signal.SIGCHLD, signal.SIG_DFL)
    else:
        signal.signal(signal.SIGCHLD, signal.SIG_IGN)

#------------------------------------------------------------------------------
# Foreground mode
#------------------------------------------------------------------------------

def run_update(repos, config):
    for name in repos:
        c = config[name]
        VCSS[c.vcs][0](c)

#------------------------------------------------------------------------------
# CGI mode
#------------------------------------------------------------------------------

def run_cgi(config):
    env = os.environ
    cfg = config['global']

    if not match_ip(env.get('REMOTE_ADDR', '0.0.0.0'), cfg.allow_ip):
        print "Content-type: text/plain\n\nDENY"
        return

    path = env.get('PATH_INFO', '').strip().strip('/').strip()

    if '/' in path:
        repo_name, secret_key = path.split('/', 1)
    else:
        repo_name = None

    if not config.is_repo(repo_name):
        print "Content-type: text/plain\n\nNOP"
        return

    if secret_key != config['global'].secret_key:
        print "Content-type: text/plain\n\nNOP"
        return

    init_sigchld()
    spawn_repo_update(config, repo_name)

    print "Content-type: text/plain\n\nOK"

#------------------------------------------------------------------------------
# PID file handling
#------------------------------------------------------------------------------

PID_FILE = None

def check_pid(config):
    fn = config['global'].pid_file
    if os.path.isfile(fn):
        try:
            pid = int(open(fn, 'r').read())
            if os.path.isdir('/proc/%d' % pid):
                raise RuntimeError("process is already running and pid file '%s' already exists" % fn)
        except ValueError:
            pass

def write_pid(config):
    global PID_FILE
    PID_FILE = config['global'].pid_file
    if PID_FILE:
        f = open(PID_FILE, 'w')
        f.write("%d" % os.getpid())
        f.close()

        signal.signal(signal.SIGTERM, sigint_handler)
        signal.signal(signal.SIGINT,  sigint_handler)
        signal.signal(signal.SIGQUIT, sigint_handler)
        signal.signal(signal.SIGSEGV, sigint_handler)
        signal.signal(signal.SIGHUP, sighup_handler)

def sighup_handler(sig, stack):
    # Restart the process
    global PID_FILE
    if os.path.isfile(PID_FILE):
        os.unlink(PID_FILE)
    os.execvp(sys.argv[0], sys.argv)
    sys.exit(1)

def sigint_handler(sig, stack):
    global PID_FILE
    if os.path.isfile(PID_FILE):
        os.unlink(PID_FILE)

#------------------------------------------------------------------------------
# Daemon mode
#------------------------------------------------------------------------------

def run_daemon(config):
    cfg = config['global']

    listen_addr = cfg.listen
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind(listen_addr)
    s.listen(1)

    check_pid(config)

    if daemonize(cfg.log_file) == 'parent':
        logging.debug("Daemon spawned")
        return

    write_pid(config)

    init_sigchld()
    init_logging("daemon")

    logging.info("Listening on %s:%d" % listen_addr)

    while True:
        conn, addr = s.accept()
        logging.info("Connect from %s:%d" % addr)

        if not match_ip(addr[0], cfg.allow_ip):
            logging.warn("Not allowed from %s:%d" % addr)
            conn.close()
            continue

        data = conn.recv(1024)
        conn.close()

        r = data.strip().split()
        if len(r) != 2:
            logging.warn("Bad input from %s:%d" % addr)
            continue

        repo_name, secret = r
        if secret != cfg.secret_key:
            logging.warn("Bad secret from %s:%d" % addr)
            continue
        if not config.is_repo(repo_name):
            logging.warn("Bad repo from %s:%d" % addr)
            continue

        spawn_repo_update(config, repo_name)


#------------------------------------------------------------------------------
# Pipe daemon mode
#------------------------------------------------------------------------------

def run_fifo(pipe, config):
    cfg = config['global']

    check_pid(config)

    if daemonize(cfg.log_file) == 'parent':
        logging.debug("Daemon spawned")
        return

    write_pid(config)

    init_sigchld()
    init_logging('fifo')

    logging.info("Reading fifo %s" % pipe)

    while True:
        f = open(pipe, 'r', 0)
        data = f.read(1024)
        while f.read(1024):
            pass
        f.close()

        r = data.strip().split()
        if not r:
            continue
        if len(r) != 2:
            logging.debug("Bad input")
            continue

        repo_name, secret = r
        if secret != cfg.secret_key:
            logging.warn("Bad secret")
            continue
        if not config.is_repo(repo_name):
            logging.warn("Bad repo")
            continue

        spawn_repo_update(config, repo_name)

#------------------------------------------------------------------------------
# General
#------------------------------------------------------------------------------

def validate_config(config):
    for name in config.keys():
        try:
            section = config[name]
            new_section = Config()

            if name == 'global':
                # Global section
                new_section.secret_key = section.secret_key
                new_section.log_file = section.get('log_file', None)
                new_section.pid_file = section.get('pid_file', None)
                new_section.allow_ip = section.get('allow_ip', '0.0.0.0/0')
                new_section.allow_ip = new_section.allow_ip.split()
                new_section.path = section.get('path', None)
                listen = section.get('listen', ':3898')
                try:
                    address, port = listen.split(':')
                    new_section.listen = address, int(port)
                except ValueError:
                    raise ConfigError("invalid 'listen' field")
            else:
                # Repository sections
                if 'vcs' not in section:
                    raise ConfigError("Key 'vcs' not given")
                if section.vcs == 'git':
                    new_section = git_validate_config(section)
                    new_section.vcs = 'git'
                else:
                    raise ConfigError("Vcs '%s' is unknown" % section.vcs)

            # Check that the config file contains only known keys
            for key in section.keys():
                if key not in new_section:
                    raise ConfigError("Spurious key '%s'" % key)

            # Done.
            config[name] = new_section
        except ValueError, err:
            raise ConfigError(err.args[0] + " in section '%s'" % name)
        except ConfigError, err:
            raise ConfigError(err.args[0] + " in section '%s'" % name)
    return config

def spawn_repo_update(config, repo_names):
    """
    Run a repository update, spawning ssh-agent as necessary.
    """

    if isinstance(repo_names, str):
        repo_names = [repo_names]

    if daemonize(config['global'].log_file) == 'child':
        init_sigchld(True)
        init_logging("spawn")
        logging.debug("Execing update process")
        level = logging.getLevelName(logging.getLogger().level)

        if config['global'].path:
            os.environ['PATH'] = os.path.pathsep.join([
                os.environ.get('PATH', ''), config['global'].path])

        os.environ.pop('DISPLAY', None)
        cmd = ['ssh-agent', sys.argv[0], '-l', level,
               'update', config._filename] + repo_names
        os.execvp(cmd[0], cmd)
        logging.debug("Spawned process exited.")
        sys.exit(1)


#------------------------------------------------------------------------------
# Updating a Git mirror
#------------------------------------------------------------------------------

def git_validate_config(config):
    new = Config()
    try:
        for key in ('local', 'git_svn_init'):
            new[key] = config[key]
    except KeyError, err:
        raise ConfigError("No value for key '%s'" % (err.args[0],))
    new.ssh_key = config.get('ssh_key', None)
    new.git_svn_init = config.get('git_svn_init', '').split()
    new.git_svn_fetch = config.get('git_svn_fetch', '').split()

    # Parse remote section

    if 'remote' not in config:
        raise ConfigError("No value for key 'remote'")

    new.remote = config['remote'].split()
    new.real_tags = [False]*len(new.remote)
    new.update_server_info = [False]*len(new.remote)

    for i, x in enumerate(config.get('real_tags', '').split()):
        new.real_tags[i] = (x.lower() in ('yes', '1', 'true'))

    for i, x in enumerate(config.get('update_server_info', '').split()):
        new.update_server_info[i] = (x.lower() in ('yes', '1', 'true'))

    return new

def git_update_mirror(repo):
    """
    Update given Git-SVN mirror

    """
    # Lock
    if not os.path.isdir(repo.local):
        os.makedirs(repo.local)
    lock = LockFile(os.path.join(repo.local, '.update-lock'))
    lock.acquire()
    try:
        _git_update_mirror(repo)
    finally:
        lock.release()

def _git_update_mirror(repo):
    local = repo.local
    first_remote = repo.remote[0]

    # Inject ssh key
    if repo.ssh_key:
        exec_command(['ssh-add', repo.ssh_key])

    logging.info("Updating repository %s ..." % local)

    if not os.path.isdir(os.path.join(local, '.git')):
        # Local repository missing
        if not os.path.isdir(local):
            os.makedirs(local)

        try:
            logging.info("Repository missing; trying to clone from remote...")
            os.chdir(local)
            exec_command(['git', 'init'])
            exec_command(['git', 'fetch', first_remote,
                          '+refs/heads/*:refs/remotes/*'])
            exec_command(['git', 'svn', 'init'] + repo.git_svn_init)
            exec_command(['git', 'checkout', '-b', 'master', 'trunk'])
            exec_command(['git', 'svn', 'rebase', '-l'])
        except ExecError:
            logging.info("Clone failed; going to get everything via SVN...")
            if os.path.isdir(local):
                shutil.rmtree(local)
            os.makedirs(local)
            os.chdir(local)
            exec_command(['git', 'init'])
            exec_command(['git', 'svn', 'init'] + repo.git_svn_init)
            exec_command(['git', 'svn', 'fetch'] + repo.git_svn_fetch)
        first_time = True
    else:
        first_time = False

    logging.debug("Fetching...")
    os.chdir(local)

    output = exec_command(['git', 'svn', 'fetch'])
    if not output.strip() and not first_time:
        # nothing to do
        logging.info("Update done, was already up-to-date")
        return

    exec_command(['git', 'svn', 'rebase', '-l'])

    for remote, real_tags, update_server_info in zip(repo.remote,
                                                     repo.real_tags,
                                                     repo.update_server_info):
        logging.info("Pushing to %s..." % remote)

        if real_tags:
            exec_command(['git', 'push', remote,
                          '+refs/remotes/tags/*:refs/tags/*',
                          '+refs/remotes/*:refs/heads/*',
                          '+master',
                          ])
        else:
            exec_command(['git', 'push', remote,
                          '+refs/remotes/*:refs/heads/*',
                          '+master',
                          ])

        if update_server_info:
            os.chdir(remote)
            try:
                exec_command(['git-update-server-info'])
            finally:
                os.chdir(local)

    logging.info("Update done")


#------------------------------------------------------------------------------
# List of VCS
#------------------------------------------------------------------------------

VCSS = {
    'git': (git_update_mirror, git_validate_config),
}


#------------------------------------------------------------------------------
# Config parsing
#------------------------------------------------------------------------------

class ConfigError(RuntimeError):
    pass

class Config(dict):
    @classmethod
    def load(cls, filename):
        self = cls()
        self._filename = filename
        self._global = Config()
        self._parse(filename)
        return self

    def is_repo(self, name):
        return (name != 'global' and name in self)

    def __getattr__(self, name):
        try:
            return self[name]
        except KeyError:
            raise AttributeError(name)

    def __setattr__(self, name, value):
        if name.startswith('_'):
            self.__dict__[name] = value
        else:
            self[name] = value

    def copy(self):
        new = Config(dict(self))
        for key, value in new.items():
            if isinstance(value, Config):
                new[key] = value.copy()
        return new

    def _parse(self, filename):
        f = open(filename, 'r')
        try:
            comment_re = re.compile(r"^\s*#.*$")
            header_re = re.compile(r"^\s*\[(.*)\]\s*$")
            key_re = re.compile(r"^([a-zA-Z0-9_-]+)\s*=\s*(.*?)\s*$")
            section = 'global'
            for line in f:
                if not line.strip(): continue
                m = comment_re.match(line)
                if m:
                    continue
                m = header_re.match(line)
                if m:
                    section = m.group(1).strip()
                    continue
                m = key_re.match(line)
                if m:
                    self.setdefault(section, Config())[m.group(1)] = m.group(2)
                    continue
                raise ConfigError("Unparseable line in config: %s" % line)
        finally:
            f.close()

#------------------------------------------------------------------------------
# Utility functions
#------------------------------------------------------------------------------

def daemonize(log_file=None):
    """
    Fork and daemonize a child process in the background.
    Returns 'child' and 'parent', for the child and the parent processes.

    """
    # Try to open log file; just to check if it works
    if log_file:
        f = open(log_file, 'a')
        f.close()

    # 1st fork
    if os.fork() > 0:
        # leave parent
        return 'parent'

    os.setsid()

    # 2nd fork
    if os.fork() > 0:
        # close parent
        os._exit(0)

    # IO streams
    si = open('/dev/null', 'r')
    if log_file is None:
        so = open('/dev/null', 'r')
        se = open('/dev/null', 'r')
    else:
        so = open(log_file, 'a', 0) # unbuffered
        se = so

    os.dup2(si.fileno(), sys.stdin.fileno())
    os.dup2(so.fileno(), sys.stdout.fileno())
    os.dup2(se.fileno(), sys.stderr.fileno())
    sys.stdout, sys.stderr = so, se
    return 'child'

def match_ip(address, mask):
    """Check if an ip address matches the specified net mask"""

    if address is None:
        address = '0.0.0.0'

    if isinstance(mask, list):
        for m in mask:
            if match_ip(address, m):
                return True
        return False

    if isinstance(address, str):
        addr_ip = inet_atoi(address)
    else:
        addr_ip = address

    if isinstance(mask, str):
        mask = mask.strip()
        if '/' in mask:
            mask, nbits = mask.split('/', 1)
            mask_ip = inet_atoi(mask)
            nbits = 32 - int(nbits)
        else:
            mask_ip = inet_atoi(mask)
            nbits = 0
    else:
        mask_ip = mask
        nbits = 0

    return (addr_ip >> nbits) == (mask_ip >> nbits)

def inet_atoi(s):
    """Convert dotted-quad IP address to long"""
    a, b, c, d = map(int, s.split('.'))
    return ((a&0xFF) << 24) | ((b&0xFF) << 16) | ((c&0xFF) << 8) | (d&0xFF)

class ExecError(RuntimeError):
    pass

def exec_command(cmd, ok_return_value=0, quiet=False):
    """
    Run given command, check return value, and return
    concatenated stdout and stderr.
    """
    try:
        if not quiet:
            logging.debug("$ %s" % " ".join(cmd))
        p = Popen(cmd, stdout=PIPE, stderr=PIPE, stdin=PIPE)
        out, err = p.communicate()
        if not quiet:
            if out:
                logging.debug(out.strip())
            if err:
                logging.debug(err.strip())
    except OSError, e:
        raise RuntimeError("Command %s failed: %s" % (' '.join(cmd), e))

    if ok_return_value is not None and p.returncode != ok_return_value:
        raise ExecError("Command %s failed (code %d): %s"
                        % (' '.join(cmd), p.returncode, out + err))
    return out + err

class LockFile(object):
    # XXX: posix-only

    def __init__(self, filename):
        self.filename = filename
        self.pid = os.getpid()
        self.count = 0

    def __enter__(self):
        self.acquire()

    def __exit__(self, exc_type, exc_value, traceback):
        self.release()

    def acquire(self, block=True):
        if self.count > 0:
            self.count += 1
            return True

        while True:
            try:
                lock_pid = os.readlink(self.filename)
                if not os.path.isdir('/proc/%s' % lock_pid):
                    # dead lock; delete under lock to avoid races
                    sublock = LockFile(self.filename + '.lock')
                    sublock.acquire()
                    try:
                        os.unlink(self.filename)
                    finally:
                        sublock.release()
            except OSError, exc:
                pass

            try:
                os.symlink(repr(self.pid), self.filename)
                break
            except OSError, exc:
                if exc.errno != 17: raise

            if not block:
                return False
            time.sleep(1)

        self.count += 1
        return True

    def release(self):
        if self.count == 1:
            if os.path.islink(self.filename):
                os.unlink(self.filename)
        elif self.count < 1:
            raise RuntimeError('Invalid lock nesting')
        self.count -= 1


#------------------------------------------------------------------------------

if __name__ == "__main__":
    main()
